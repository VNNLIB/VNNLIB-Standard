module vnnlib-semantics where

open import Data.List as List
open import Data.String hiding (map)
open import Data.Nat as ‚Ñï hiding (_<·µá_)
open import Data.Integer
open import Data.Rational as ‚Ñö
open import Data.Bool
open import Data.Product.Nary.NonDependent as Nary
open import Data.Fin as Fin
open import Data.Product as Product
open import Level
open import Function.Nary.NonDependent as NFunc
open import Function.Base
open import Relation.Binary.PropositionalEquality as Eq using (_‚â°_; refl; subst)
open import Data.Empty using (‚ä•)

open import utils
open import vnnlib-types
open import vnnlib-syntax
open import tensor using (Tensor; TensorShape; tensorLookup)

    
-- Network Implementation Representation
SetOfTensors : (shapes : List TensorShape) ‚Üí Set 
SetOfTensors shapes = 
  (i : Fin (List.length shapes)) ‚Üí Tensor ‚Ñö (List.lookup shapes i)

NetworkImplementation : NetworkType ‚Üí Set
NetworkImplementation networkœÑ = SetOfTensors inputShape ‚Üí SetOfTensors outputShape
  where
    inputShape = NetworkType.inputShape networkœÑ
    outputShape = NetworkType.outputShape networkœÑ

-- Environment Representation
Assignments : Context ‚Üí Set
Assignments Œì = 
  (i : Fin (List.length Œì)) ‚Üí let networkType = List.lookup Œì i in SetOfTensors (NetworkType.inputShape networkType)

NetworkImplementations : Context ‚Üí Set
NetworkImplementations Œì = 
  (i : Fin (List.length Œì)) ‚Üí let networkType = List.lookup Œì i in NetworkImplementation networkType

Environment : Context ‚Üí Set
Environment Œì = NetworkImplementations Œì √ó Assignments Œì

-- Semantics of Assertions
module _ (Œì : Context) (Œµ : Environment Œì) where

  module _ (œÑ : ElementType) where
    ‚ü¶_‚üß‚Çê : ArithExpr Œì œÑ ‚Üí ElementTypeToSet œÑ
    ‚ü¶ (constant a) ‚üß‚Çê         = a
    ‚ü¶ (negate a) ‚üß‚Çê           = 0‚Ñö ‚Ñö.- ‚ü¶ a ‚üß‚Çê 
    ‚ü¶ (varInput i‚Çô‚Çë‚Çú j·µ¢‚Çô‚Çö indices ) ‚üß‚Çê    = tensorLookup indices (((proj‚ÇÇ Œµ) i‚Çô‚Çë‚Çú) j·µ¢‚Çô‚Çö)
    ‚ü¶ (varOutput i‚Çô‚Çë‚Çú j‚Çí·µ§‚Çú indices ) ‚üß‚Çê   = tensorLookup indices (((((proj‚ÇÅ Œµ) i‚Çô‚Çë‚Çú) (((proj‚ÇÇ Œµ) i‚Çô‚Çë‚Çú))) j‚Çí·µ§‚Çú))
    ‚ü¶ (add []) ‚üß‚Çê             = 0‚Ñö
    ‚ü¶ (add (a‚ÇÄ ‚à∑ a)) ‚üß‚Çê       = ‚ü¶ a‚ÇÄ ‚üß‚Çê ‚Ñö.+ ‚ü¶ (add a) ‚üß‚Çê
    ‚ü¶ (mult []) ‚üß‚Çê            = 1‚Ñö
    ‚ü¶ (mult (a‚ÇÄ ‚à∑ a)) ‚üß‚Çê      = ‚ü¶ a‚ÇÄ ‚üß‚Çê ‚Ñö.* ‚ü¶ (mult a) ‚üß‚Çê
    ‚ü¶ (minus []) ‚üß‚Çê           = 0‚Ñö
    ‚ü¶ (minus (a‚ÇÄ ‚à∑ a)) ‚üß‚Çê     = ‚ü¶ a‚ÇÄ ‚üß‚Çê ‚Ñö.- ‚ü¶ (add a) ‚üß‚Çê

    ‚ü¶_‚üß·∂ú : CompExpr Œì œÑ ‚Üí Bool
    ‚ü¶ greaterThan x x‚ÇÅ ‚üß·∂ú = ‚ü¶ x ‚üß‚Çê >·µá ‚ü¶ x‚ÇÅ ‚üß‚Çê
    ‚ü¶ lessThan x x‚ÇÅ ‚üß·∂ú = ‚ü¶ x ‚üß‚Çê <·µá ‚ü¶ x‚ÇÅ ‚üß‚Çê
    ‚ü¶ greaterEqual x x‚ÇÅ ‚üß·∂ú = ‚ü¶ x ‚üß‚Çê ‚â•·µá ‚ü¶ x‚ÇÅ ‚üß‚Çê
    ‚ü¶ lessEqual x x‚ÇÅ ‚üß·∂ú = ‚ü¶ x ‚üß‚Çê ‚Ñö.‚â§·µá ‚ü¶ x‚ÇÅ ‚üß‚Çê
    ‚ü¶ notEqual x x‚ÇÅ ‚üß·∂ú = ‚ü¶ x ‚üß‚Çê ‚â†·µá ‚ü¶ x‚ÇÅ ‚üß‚Çê
    ‚ü¶ equal x x‚ÇÅ ‚üß·∂ú = ‚ü¶ x ‚üß‚Çê =·µá ‚ü¶ x‚ÇÅ ‚üß‚Çê

  ‚ü¶_‚üß·µá : BoolExpr Œì ‚Üí Bool
  ‚ü¶ (literal b) ‚üß·µá          = b
  ‚ü¶ compExpr (fst , snd) ‚üß·µá = ‚ü¶ fst ‚üß·∂ú snd
  ‚ü¶ (andExpr []) ‚üß·µá         = true
  ‚ü¶ (andExpr (b ‚à∑ xb)) ‚üß·µá   = _‚àß_ ‚ü¶ b ‚üß·µá ‚ü¶ (andExpr xb) ‚üß·µá
  ‚ü¶ (orExpr []) ‚üß·µá          = false
  ‚ü¶ (orExpr (b ‚à∑ xb)) ‚üß·µá    = _‚à®_ ‚ü¶ b ‚üß·µá ‚ü¶  (orExpr xb) ‚üß·µá

  ‚ü¶_‚üß‚Çö : Assertion Œì ‚Üí Bool
  ‚ü¶ (assert p) ‚üß‚Çö = ‚ü¶ p ‚üß·µá

-- Semantics of a Query
‚ü¶_‚üßùï¢ : Query ‚Üí Set
‚ü¶ mkQuery networks assertions ‚üßùï¢ =
  let Œì = mkContext networks in (n : NetworkImplementations Œì) ‚Üí ‚àÉ Œª (x : Assignments Œì) ‚Üí List.foldl (Œª z z‚ÇÅ ‚Üí and (z ‚à∑ ‚ü¶ Œì ‚üß‚Çö (n , x) z‚ÇÅ ‚à∑ [])) true assertions ‚â° true



