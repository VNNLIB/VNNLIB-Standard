;  VNN-Lib Test Specification for the `linearise` function
; This file covers various edge cases to ensure correctness and robustness.

(declare-network test
    (declare-input X Real [3])
    (declare-output Y Real [])
)

; --- GROUP 1: Basic Operations & Constants ---

; Expected LHS: 1 * X[0] + 5
(assert (<= (+ X[0] 5.0) 10.0))

; Expected LHS: -1 * X[0]
(assert (<= (- X[0]) 0.0))

; Expected LHS: 1 * X[0] - 5
(assert (<= (- X[0] 5) 0.0))

; Expected LHS: -1 * X[0] + 5
(assert (<= (- 5 X[0]) 0.0))

; Expected LHS: 3.5 * X[0]
(assert (<= (* X[0] 3.5) 7.0))

; Expected LHS: -2 * X[0]
(assert (<= (* -2.0 X[0]) 0.0))


; --- GROUP 2: Term Simplification & Combination ---

; Expected LHS: 2 * X[0] + 5
(assert (<= (+ X[0] 5 X[0]) 10.0))

; Expected LHS: 0
(assert (<= (- X[0] X[0]) 0.0))

; Expected LHS: -1 * X[0] - 1 * X[1] + 3
(assert (<= (+ (- X[0] X[1]) 3) 0.0))

; Expected LHS: 1 * X[0] - 1 * X[1] - 1 * X[2]
(assert (<= (- X[0] X[1] X[2]) 0.0))

; Expected LHS: -1 * X[0] - 1 * X[1] + 5
(assert (<= (+ 5 (* -1 X[0]) (- X[1])) 0.0))


; --- GROUP 3: Zero, One, and Constant-Only Expressions ---

; Expected LHS: 0
(assert (<= (* X[0] 0.0) 0.0))

; Expected LHS: 1 * X[0]
(assert (<= (* X[0] 1.0) 5.0))

; Expected LHS: 1 * X[0]
(assert (<= (+ X[0] 0) 5.0))

; Expected LHS: 15
(assert (<= (* 2 3.0 2.5) 20.0))

; Expected LHS: 8
(assert (<= (+ 1 2 5) 10.0))


; --- GROUP 4: Complex Nested Expressions ---

; Expected LHS: -1 * X[0] + 1 * X[1] + 3
(assert (<= (- (+ X[1] 5) (+ X[0] 2)) 0.0))

; Expected LHS: 6 * X[0] + 2
(assert (<= (+ (* 2 (* X[0] 3)) 2) 20.0))

; Expected LHS: 1 * X[0] - 1 * X[1] - 1 * X[2] + 10
(assert (>= (+ (- 10 X[1]) (- X[2] X[0])) 0.0)) ; Test reordering


; --- GROUP 5: Boolean Structure & Multiple Properties ---

(assert (and
    ; Expected LHS: 1 * X[0]
    (>= X[0] 0.0)
    ; Expected LHS: 1 * X[1]
    (<= X[1] 100.0)
))

(assert (or
    ; Expected LHS: 1 * Y[0]
    (<= Y[0] -5.0)
    ; Expected LHS: 1 * Y[0]
    (>= Y[0] 5.0)
))


; --- GROUP 6: Non-Linear Expressions (Error Handling) ---
; These assertions should cause the linearise function to fail and print an error.

; Test Case: Variable multiplied by Variable
; Expected: Error "Multiple variables detected in multiplication"
(assert (<= (* X[0] X[1]) 10.0))

; Test Case: Variable multiplied by a non-constant expression
; This is equivalent to (* X[0] (+ X[1] 2)) which is X[0]*X[1] + 2*X[0]
; Expected: Error "Multiple variables detected in multiplication"
(assert (<= (* X[0] (+ X[1] 2)) 25.0))
