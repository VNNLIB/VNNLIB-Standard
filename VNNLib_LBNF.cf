-- This is the LBNF grammar for the VNNLib language

-- The regular expression for a signed double or integer
token SDouble '-'? digit+ '.' digit+ ('e' '-'? digit+)? ;
token SInt '-' digit+ ;
token Int digit+ ;

-- The regular expression for an element of a tensor variable
token TensorElement letter+ digit* '_' digit+ ('-' digit+)* ;

-- The regular expression for a tensor variable
token VariableName letter+ digit* ;

-- Production to represent a Tensor shape as a sequence of integers
[]. [Int] ::= ;
(:). [Int] ::= Int [Int] ;

-- ArithExpr is a numeric value that may be a paramater, a tensor element, 
-- or an arithmetic operation
VarExpr. ArithExpr ::= TensorElement ;
DoubleExpr. ArithExpr ::= SDouble ;
SIntExpr. ArithExpr ::= SInt ;
IntExpr. ArithExpr ::= Int ;

-- An arithmetic operator is an n-ary operator that performs an arithmetic operation on n inputs
Negate. ArithExpr ::= "(" "-" ArithExpr  ")" ;
Plus. ArithExpr ::= "(" "+" [ArithExpr] ")";
Minus. ArithExpr ::= "(" "-" ArithExpr [ArithExpr] ")" ;
Multiply. ArithExpr ::= "(" "*" [ArithExpr] ")" ;
separator nonempty ArithExpr "" ;

-- A comparative operator is a binary operator that compares two inputs
GreaterThan. BoolExpr ::= "(" ">" ArithExpr ArithExpr ")" ;
LessThan. BoolExpr ::= "(" "<" ArithExpr ArithExpr ")" ;
GreaterEqual. BoolExpr ::= "(" ">=" ArithExpr ArithExpr ")" ;
LessEqual. BoolExpr ::= "(" "<=" ArithExpr ArithExpr ")" ;
NotEqual. BoolExpr ::= "(" "!=" ArithExpr ArithExpr ")" ;
Equal. BoolExpr ::= "(" "==" ArithExpr ArithExpr ")";

-- A connective operator is an n-ary operator that combines at least two boolean formulas
And. BoolExpr ::= "(" "and" BoolExpr [BoolExpr] ")" ;
Or. BoolExpr ::= "(" "or" BoolExpr [BoolExpr] ")";
separator nonempty BoolExpr "" ;

-- A property is a constraint that must be satisfied by the model. 
Prop. Property ::= "(assert" BoolExpr ")" ;
separator nonempty Property "" ;

-- A tensor element is a generic scalar variable of type Real
-- or a specific type that is defined for onnx nodes:
-- https://github.com/onnx/onnx/blob/main/docs/IR.md#tensor-element-types
GenericElementType. ElementType ::= "Real" ;
ElementTypeF16. ElementType ::= "float16" ;
ElementTypeF32. ElementType ::= "float32" ;
ElementTypeF64. ElementType ::= "float64" ;
ElementTypeBF16. ElementType ::= "bfloat16" ;
ElementTypeF8E4M3FN. ElementType ::= "float8e4m3fn" ;
ElementTypeF8E5M2. ElementType ::= "float8e5m2" ;
ElementTypeF8E4M3FNUZ. ElementType ::= "float8e4m3fnuz" ;
ElementTypeF8E5M2FNUZ. ElementType ::= "float8e5m2fnuz" ;
ElementTypeF4E2M1. ElementType ::= "float4e2m1" ;
ElementTypeI8. ElementType ::= "int8" ;
ElementTypeI16. ElementType ::= "int16" ;
ElementTypeI32. ElementType ::= "int32" ;
ElementTypeI64. ElementType ::= "int64" ;
ElementTypeU8. ElementType ::= "uint8" ;
ElementTypeU16. ElementType ::= "uint16" ;
ElementTypeU32. ElementType ::= "uint32" ;
ElementTypeU64. ElementType ::= "uint64" ;
ElementTypeC64. ElementType ::= "complex64" ;
ElementTypeC128. ElementType ::= "complex128" ;
ElementTypeBool. ElementType ::= "bool" ;
ElementTypeString. ElementType ::= "string" ;

-- A tensor definition is a declaration of a tensor variable with a shape and an element type
InputDef. InputDefinition ::= "(declare-input" VariableName ElementType [Int] ")" ;
IntermediateDef. IntermediateDefinition ::= "(declare-intermediate" VariableName ElementType [Int] "onnx-node" ":" String ")" ;
OutputDef. OutputDefinition ::= "(declare-output" VariableName ElementType [Int] ")" ;

separator nonempty InputDefinition "" ;
separator IntermediateDefinition "" ;
separator nonempty OutputDefinition "" ;

NetworkDef. NetworkDefinition ::= "(declare-network" VariableName [InputDefinition] [IntermediateDefinition] [OutputDefinition] ")" ;
separator nonempty NetworkDefinition "" ;

-- A query is a series of network definitions followed by a series of properties
VNNLibQuery. Query ::= [NetworkDefinition] [Property] ;

-- A line may be commented out by starting with a semicolon
comment ";" ;

entrypoints Query ;
