-- This is the LBNF grammar for the VNNLib language

-- The regular expression for a signed double or integer
token SDouble '-'? digit+ '.' digit+ ('e' '-'? digit+)? ;
token SInt '-' digit+ ;
token Int digit+ ;

-- The regular expression for an element of a tensor variable
token TensorElement letter+ digit* ('_' digit+ ('-' digit+)*)? ;

-- A parameter is a scalar variable that may be a signed integer or a double
DoubleParam. Parameter ::= SDouble ;
SIntParam. Parameter ::= SInt ;
IntParam. Parameter ::= Int ;

-- An Input is a numeric value that may be a paramater, a tensor element, 
-- or the result of an arithmetic formula
TElemInput. Input ::= TensorElement ;
ParamInput. Input ::= Parameter ;
ArithInput. Input ::= ArithmeticFormula ;

-- A comparative operator is a binary operator that compares two inputs
GreaterThan. ComparativeOperation ::= ">" Input Input ;
LessThan. ComparativeOperation ::= "<" Input Input ;
GreaterEqual. ComparativeOperation ::= ">=" Input Input ;
LessEqual. ComparativeOperation ::= "<=" Input Input ;
NotEqual. ComparativeOperation ::= "!=" Input Input;
Equal. ComparativeOperation ::= "==" Input Input ;

-- An arithmetic operator is an n-ary operator that performs an arithmetic operation on n inputs
ArithFormulaInputBase. ArithmeticInputs ::= Input Input ;
ArithFormulaInput. ArithmeticInputs ::= ArithmeticInputs Input ;

Plus. ArithmeticOperation ::= "+" ArithmeticInputs ;
Minus. ArithmeticOperation ::= "-" ArithmeticInputs ;
Multiply. ArithmeticOperation ::= "*" ArithmeticInputs ;

-- A connective operator is an n-ary operator that combines at least two boolean formulas
ConnBool. Boolean ::= ConnectiveFormula ;
CompBool. Boolean ::= ComparativeFormula ;
ConnFormInputsBase. ConnectiveInputs ::= Boolean Boolean ;
ConnFormInputs. ConnectiveInputs ::= ConnectiveInputs Boolean ;

And. ConnectiveOperation ::= "and" ConnectiveInputs ;
Or. ConnectiveOperation ::= "or" ConnectiveInputs ;

-- Arithmetic, comparative, and connective formulas are bounded by parentheses
ArithForm. ArithmeticFormula ::= "(" ArithmeticOperation")" ;
CompForm. ComparativeFormula ::= "(" ComparativeOperation ")" ;
ConnForm. ConnectiveFormula ::= "(" ConnectiveOperation ")" ;

-- A property is a constraint that must be satisfied by the model. 
-- It is an assertion of an arithmetic, comparative, or connective formula
PropArithmetic. Property ::= "(" "assert" ArithmeticFormula ")" ;
PropComparative. Property ::= "(" "assert" ComparativeFormula ")" ;
PropConnective. Property ::= "(" "assert" ConnectiveFormula ")" ;

PropsBase. Properties ::= Property ;
Props. Properties ::= Properties Property ;

-- A tensor element is a scalar variable of type Real
-- TODO: Add support for other types
EType. ElementType ::= "Real" ;

-- A definition is a declaration of a constant variable or a function variable
ConstDef. Definition ::= "(" "declare-const" TensorElement ElementType ")" ;
FunDef. Definition ::= "(" "declare-fun" TensorElement "()" ElementType ")" ;

DefsBase. Definitions ::= Definition ;
Defs. Definitions ::= Definitions Definition ;

-- A command consists a series of definitions followed by a series of properties
Comm. Command ::= Definitions Properties ;

-- A line may be commented out by starting with a semicolon
comment ";" ;

entrypoints Command ;
