token SDouble '-'? digit+ '.' digit+ ('e' '-'? digit+)? ;
token SInt '-'? digit+ ;
token TensorElement letter+ digit* ('_' digit+ ('-' digit+)*)? ;

TDim.  Dimension ::= WholeNumber;
TDims. Dimension ::= Dimension "," Dimension;

DParam. Parameter ::= SDouble ;
IParam. Parameter ::= SInt ;

TElem. Element ::= TensorName "_" Subscript;
ElemT. ElementType ::= String;

Param. Parameter ::= Double | Integer;

COps. ComparitiveOperator ::= ">" | "<" | ">=" | "<=" | "!=" | "==";
Conn. Connective ::= "and" | "or" | "not";
AOps. ArithmeticOperator ::= "+" | "-" | "*";

AForm. ArithmeticFormula ::= "(" ArithmeticOperator "(" Element | Parameter | ArithmeticFormula ")" ")";
CompForm. ComparativeFormula ::= "(" ComparitiveOperator "(" Element | Parameter | ArithmeticFormula ")" ")";
ConnForm. ConnectiveFormula ::= "(" Connective "(" (ComparativeFormula | ConnectiveFormula) ")" ")";

Form. Formula ::= (ArithmeticFormula | ComparativeFormula | ConnectiveFormula);

Def.  Definition ::= "(" "declare-fun" ElementDefinition ")";
EDef. ElementDefinition ::= Element "()" ElementType;

ConnFormBase. ConnectiveFormula ::= "(" Connective ComparativeFormula ")" ;
BoolForm1. BooleanFormula ::= ConnectiveFormula;
BoolForm2. BooleanFormula ::= ComparativeFormula;
BoolForm3. BooleanFormula ::= BooleanFormula ConnectiveFormula;
BoolForm4. BooleanFormula ::= BooleanFormula ComparativeFormula;
ConnForm. ConnectiveFormula ::= "(" Connective BooleanFormula ")" ;

ComBase. Command ::= Definition | Constraint
Coms. Command ::= Command "\n" Command;

EType. ElementType ::= "Real" ;
CDef. Definition ::= "(" "declare-const" Element ElementType ")" ;
FDef. Definition ::= "(" "declare-fun" Element "()" ElementType ")" ;

Con. Constraint ::= "(" "assert" Formula ")" ;
CommDef. Command ::= Definition ;

CommCon. Command ::= Constraint ;
Specs1. Command ::= Command "\n" Definition;
Specs2. Command ::= Command "\n" Constraint;

comment ";" ;

entrypoints Command;