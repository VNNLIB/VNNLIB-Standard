-- This is the LBNF grammar for the VNNLib language

-- The regular expression for a signed double or integer
token SDouble '-'? digit+ '.' digit+ ('e' '-'? digit+)? ;
token SInt '-' digit+ ;
token Int digit+ ;

-- The regular expression for an element of a tensor variable
token TensorElement letter+ digit* '_' digit+ ('-' digit+)* ;

-- The regular expression for a tensor variable
token VariableName letter+ digit* ;

-- Production to represent a Tensor shape as a sequence of integers
[]. [Int] ::= ;
(:). [Int] ::= Int [Int] ;

-- A parameter is a scalar variable that may be a signed integer or a double
DoubleParam. Parameter ::= SDouble ;
SIntParam. Parameter ::= SInt ;
IntParam. Parameter ::= Int ;

-- An Input is a numeric value that may be a paramater, a tensor element, 
-- or the result of an arithmetic formula
TElemInput. Input ::= TensorElement ;
ParamInput. Input ::= Parameter ;
ArithInput. Input ::= ArithmeticFormula ;
separator nonempty Input "" ;

-- A comparative operator is a binary operator that compares two inputs
GreaterThan. ComparativeOperation ::= ">" Input Input ;
LessThan. ComparativeOperation ::= "<" Input Input ;
GreaterEqual. ComparativeOperation ::= ">=" Input Input ;
LessEqual. ComparativeOperation ::= "<=" Input Input ;
NotEqual. ComparativeOperation ::= "!=" Input Input;
Equal. ComparativeOperation ::= "==" Input Input ;

-- An arithmetic operator is an n-ary operator that performs an arithmetic operation on n inputs
Negate. ArithmeticOperation ::= "-" Input ;
Plus. ArithmeticOperation ::= "+" Input [Input] ;
Minus. ArithmeticOperation ::= "-" Input [Input] ;
Multiply. ArithmeticOperation ::= "*" Input [Input] ;

-- A connective operator is an n-ary operator that combines at least two boolean formulas
ConnBool. Boolean ::= ConnectiveFormula ;
CompBool. Boolean ::= ComparativeFormula ;
separator nonempty Boolean "" ;

And. ConnectiveOperation ::= "and" Boolean [Boolean] ;
Or. ConnectiveOperation ::= "or" Boolean [Boolean] ;

-- Arithmetic, comparative, and connective formulas are bounded by parentheses
ArithForm. ArithmeticFormula ::= "(" ArithmeticOperation")" ;
CompForm. ComparativeFormula ::= "(" ComparativeOperation ")" ;
ConnForm. ConnectiveFormula ::= "(" ConnectiveOperation ")" ;

-- A property is a constraint that must be satisfied by the model. 
-- It is an assertion of an arithmetic, comparative, or connective formula
PropArithmetic. Property ::= "(" "assert" ArithmeticFormula ")" ;
PropComparative. Property ::= "(" "assert" ComparativeFormula ")" ;
PropConnective. Property ::= "(" "assert" ConnectiveFormula ")" ;
separator nonempty Property "" ;

-- A tensor element is a scalar variable of type Real
-- TODO: Add support for other types
ElementType. ElementType ::= "Real" ;

-- A tensor definition is a declaration of a tensor variable with a shape and an element type
DefInput. Definition ::= "(" "declare-input" VariableName ElementType [Int] ")" ;
DefOnnxNode. Definition ::= "(" "declare-node" VariableName ElementType [Int] "onnx-node" ":" String ")" ;
DefOutput. Definition ::= "(" "declare-output" VariableName ElementType [Int] ")" ;
separator nonempty Definition "" ;

DefNetwork. Network ::= "(" "declare-network" VariableName [Definition] ")" ;
NetworkListBase. NetworkList ::= Network ;
NetworkList. NetworkList ::= NetworkList Network ;

-- A query consists a series of networks, followed by a series of definitions followed by a series of properties
Query. Query ::= NetworkList [Property] ;

-- A line may be commented out by starting with a semicolon
comment ";" ;

entrypoints Query ;
