"""Type stubs for VNNLib Python bindings"""

from typing import Dict, List, Union, Optional, Any, Iterator

class VNNLibException(Exception): ...

class Visitable:
    def __str__(self) -> str: ...

class ElementType(Visitable): ...
class GenericElementType(ElementType): ...
class ElementTypeF16(ElementType): ...
class ElementTypeF32(ElementType): ...
class ElementTypeF64(ElementType): ...
class ElementTypeBF16(ElementType): ...
class ElementTypeF8E4M3FN(ElementType): ...
class ElementTypeF8E5M2(ElementType): ...
class ElementTypeF8E4M3FNUZ(ElementType): ...
class ElementTypeF8E5M2FNUZ(ElementType): ...
class ElementTypeF4E2M1(ElementType): ...
class ElementTypeI8(ElementType): ...
class ElementTypeI16(ElementType): ...
class ElementTypeI32(ElementType): ...
class ElementTypeI64(ElementType): ...
class ElementTypeU8(ElementType): ...
class ElementTypeU16(ElementType): ...
class ElementTypeU32(ElementType): ...
class ElementTypeU64(ElementType): ...
class ElementTypeC64(ElementType): ...
class ElementTypeC128(ElementType): ...
class ElementTypeBool(ElementType): ...
class ElementTypeString(ElementType): ...

class TensorShape(Visitable): ...
class ScalarDims(TensorShape): ...

class TensorDims(TensorShape):
    dims: 'ListInt'

class ListInt:
    def __len__(self) -> int: ...
    def __iter__(self) -> Iterator[str]: ...
    def __getitem__(self, i: int) -> str: ...
    def __str__(self) -> str: ...

class ArithExpr(Visitable): ...

class VarExpr(ArithExpr):
    variable_name: str
    indices: 'ListInt'

class DoubleExpr(ArithExpr):
    value: str

class SIntExpr(ArithExpr):
    value: str

class IntExpr(ArithExpr):
    value: str

class Negate(ArithExpr):
    expr: ArithExpr

class Plus(ArithExpr):
    operands: 'ListArithExpr'

class Minus(ArithExpr):
    left: ArithExpr
    right_operands: 'ListArithExpr'

class Multiply(ArithExpr):
    operands: 'ListArithExpr'

class ListArithExpr:
    def __len__(self) -> int: ...
    def __iter__(self) -> Iterator[ArithExpr]: ...
    def __getitem__(self, i: int) -> ArithExpr: ...

class BoolExpr(Visitable): ...

class GreaterThan(BoolExpr):
    expr1: ArithExpr
    expr2: ArithExpr

class LessThan(BoolExpr):
    expr1: ArithExpr
    expr2: ArithExpr

class GreaterEqual(BoolExpr):
    expr1: ArithExpr
    expr2: ArithExpr

class LessEqual(BoolExpr):
    expr1: ArithExpr
    expr2: ArithExpr

class NotEqual(BoolExpr):
    expr1: ArithExpr
    expr2: ArithExpr

class Equal(BoolExpr):
    expr1: ArithExpr
    expr2: ArithExpr

class And(BoolExpr):
    operands: 'ListBoolExpr'

class Or(BoolExpr):
    operands: 'ListBoolExpr'

class ListBoolExpr:
    def __len__(self) -> int: ...
    def __iter__(self) -> Iterator[BoolExpr]: ...
    def __getitem__(self, i: int) -> BoolExpr: ...

class Assertion(Visitable): ...

class Assert(Assertion):
    expr: BoolExpr

class ListAssertion:
    def __len__(self) -> int: ...
    def __iter__(self) -> Iterator[Assertion]: ...
    def __getitem__(self, i: int) -> Assertion: ...

class InputDefinition(Visitable): ...

class InputDef(InputDefinition):
    variable_name: str
    element_type: ElementType
    shape: TensorShape

class InputOnnxDef(InputDefinition):
    variable_name: str
    element_type: ElementType
    shape: TensorShape
    onnx_name: str

class ListInputDefinition:
    def __len__(self) -> int: ...
    def __iter__(self) -> Iterator[InputDefinition]: ...
    def __getitem__(self, i: int) -> InputDefinition: ...

class HiddenDefinition(Visitable): ...

class HiddenDef(HiddenDefinition):
    variable_name: str
    element_type: ElementType
    shape: TensorShape
    onnx_name: str

class ListHiddenDefinition:
    def __len__(self) -> int: ...
    def __iter__(self) -> Iterator[HiddenDefinition]: ...
    def __getitem__(self, i: int) -> HiddenDefinition: ...

class OutputDefinition(Visitable): ...

class OutputDef(OutputDefinition):
    variable_name: str
    element_type: ElementType
    shape: TensorShape

class OutputOnnxDef(OutputDefinition):
    variable_name: str
    element_type: ElementType
    shape: TensorShape
    onnx_name: str

class ListOutputDefinition:
    def __len__(self) -> int: ...
    def __iter__(self) -> Iterator[OutputDefinition]: ...
    def __getitem__(self, i: int) -> OutputDefinition: ...

class NetworkDefinition(Visitable): ...

class NetworkDef(NetworkDefinition):
    variable_name: str
    inputs: ListInputDefinition
    hiddens: ListHiddenDefinition
    outputs: ListOutputDefinition

class ListNetworkDefinition:
    def __len__(self) -> int: ...
    def __iter__(self) -> Iterator[NetworkDefinition]: ...
    def __getitem__(self, i: int) -> NetworkDefinition: ...

class Query(Visitable): ...

class VNNLibQuery(Query):
    networks: ListNetworkDefinition
    assertions: ListAssertion

def parse_vnnlib(path: str) -> VNNLibQuery: ...
def parse_vnnlib_str(content: str) -> VNNLibQuery: ...
def write_vnnlib_str(query: VNNLibQuery) -> str: ...
def check_query(query: VNNLibQuery, json: bool = False) -> Dict[str, Any]: ...
def node_to_string(node: Visitable) -> str: ...
def node_to_pretty_string(node: Visitable) -> str: ...

__version__: str
