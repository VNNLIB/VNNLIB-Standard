-- This is the LBNF grammar for the VNNLib language

-- Defines the version number of VNNLIB. 
-- The '<' and '>' characters are used so it doesn't clash with the Number token
position token VersionToken '<' digit '.' digit '>' ;
-- Defines a numeric literal
position token Number '-'? digit+ ('.' digit+)? ;
-- The regular expression for allowed Variable names - tensors, or networks
position token VariableName letter (letter|digit|'_')* ;

-- Sequence of integers to represent Tensor shape/indices
separator nonempty Number "," ;

-- Production of Tensor Shape (empty shape is allowed for scalar tensors)
ScalarDims. TensorShape ::= "[" "]" ;
TensorDims. TensorShape ::= "[" [Number] "]" ;

-- The base case of ArithExpr is a numeric value or a tensor element
-- A variable refers to a tensor element, constructed with the associated variable name and tensor indices
VarExpr. ArithExpr ::= VariableName "[" [Number] "]" ;
ValExpr. ArithExpr ::= Number ;

-- An arithmetic operator is a unary or binary operator that performs an arithmetic operation
-- Operations can be defined with an arbitrary number of inputs which are left associative.
Negate. ArithExpr ::= "(" "-" ArithExpr  ")" ;
Plus. ArithExpr ::= "(" "+" [ArithExpr] ")";
Minus. ArithExpr ::= "(" "-" ArithExpr [ArithExpr] ")" ;
Multiply. ArithExpr ::= "(" "*" [ArithExpr] ")" ;
separator nonempty ArithExpr "" ;

-- A comparative operator is a binary operator that compares two inputs
GreaterThan. BoolExpr ::= "(" ">" ArithExpr ArithExpr ")" ;
LessThan. BoolExpr ::= "(" "<" ArithExpr ArithExpr ")" ;
GreaterEqual. BoolExpr ::= "(" ">=" ArithExpr ArithExpr ")" ;
LessEqual. BoolExpr ::= "(" "<=" ArithExpr ArithExpr ")" ;
NotEqual. BoolExpr ::= "(" "!=" ArithExpr ArithExpr ")" ;
Equal. BoolExpr ::= "(" "==" ArithExpr ArithExpr ")";

-- A connective (or logical) operator is an n-ary operator that combines multiple Boolean formulas
And. BoolExpr ::= "(" "and" [BoolExpr] ")" ;
Or. BoolExpr ::= "(" "or" [BoolExpr] ")";
separator nonempty BoolExpr "" ;

-- An assertion is a constraint that must be satisfied by the model. 
Assert. Assertion ::= "(assert" BoolExpr ")" ;
separator nonempty Assertion "" ;

-- A tensor element is a generic scalar variable of type Real
-- or a specific type that is defined for onnx nodes:
-- https://github.com/onnx/onnx/blob/main/docs/IR.md#tensor-element-types
GenericElementType. ElementType ::= "Real" ;
ElementTypeF16. ElementType ::= "float16" ;
ElementTypeF32. ElementType ::= "float32" ;
ElementTypeF64. ElementType ::= "float64" ;
ElementTypeBF16. ElementType ::= "bfloat16" ;
ElementTypeF8E4M3FN. ElementType ::= "float8e4m3fn" ;
ElementTypeF8E5M2. ElementType ::= "float8e5m2" ;
ElementTypeF8E4M3FNUZ. ElementType ::= "float8e4m3fnuz" ;
ElementTypeF8E5M2FNUZ. ElementType ::= "float8e5m2fnuz" ;
ElementTypeF4E2M1. ElementType ::= "float4e2m1" ;
ElementTypeI8. ElementType ::= "int8" ;
ElementTypeI16. ElementType ::= "int16" ;
ElementTypeI32. ElementType ::= "int32" ;
ElementTypeI64. ElementType ::= "int64" ;
ElementTypeU8. ElementType ::= "uint8" ;
ElementTypeU16. ElementType ::= "uint16" ;
ElementTypeU32. ElementType ::= "uint32" ;
ElementTypeU64. ElementType ::= "uint64" ;
ElementTypeC64. ElementType ::= "complex64" ;
ElementTypeC128. ElementType ::= "complex128" ;
ElementTypeBool. ElementType ::= "bool" ;
ElementTypeString. ElementType ::= "string" ;

-- A tensor definition is a declaration of a tensor variable with a shape and an element type
-- Input and output definitions have an optional ONNX name string (using double quotes)
InputDef. InputDefinition ::= "(declare-input" VariableName ElementType TensorShape ")" ;
InputOnnxDef. InputDefinition ::= "(declare-input" VariableName ElementType TensorShape String ")" ;

-- Hidden definitions have a mandatory ONNX name string
HiddenDef. HiddenDefinition ::= "(declare-hidden" VariableName ElementType TensorShape String ")" ;

OutputDef. OutputDefinition ::= "(declare-output" VariableName ElementType TensorShape ")" ;
OutputOnnxDef. OutputDefinition ::= "(declare-output" VariableName ElementType TensorShape String ")" ;

separator nonempty InputDefinition "" ;
separator HiddenDefinition "" ;
separator nonempty OutputDefinition "" ;

NetworkDef. NetworkDefinition ::= "(declare-network" VariableName [InputDefinition] [HiddenDefinition] [OutputDefinition] ")" ;
-- Zero or more network definitions allowed
separator NetworkDefinition "" ;

-- The version of the VNN-LIB query being used that follows <breaking>.<non-breaking> version numbering
VNNLibVersion. Version ::= "(vnnlib-version" VersionToken ")" ;

-- A query is a series of network definitions followed by a series of assertions
VNNLibQuery. Query ::= Version [NetworkDefinition] [Assertion] ;

-- A comment starts with a semicolon
comment ";" ;

entrypoints Query ;
