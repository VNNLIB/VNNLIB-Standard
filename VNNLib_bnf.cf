token SDouble '-'? digit+ '.' digit+ ('e' '-'? digit+)? ;
token SInt '-'? digit+ ;
token TensorElement letter+ digit* ('_' digit+ ('-' digit+)*)? ;

Less.  ComparitiveOperator  ::= "<" ;
Greater.  ComparitiveOperator  ::= ">" ;
LessEq.  ComparitiveOperator  ::= "<=" ;
GreaterEq.  ComparitiveOperator  ::= ">=" ;
Eq. ComparitiveOperator  ::= "==" ;
NotEq. ComparitiveOperator  ::= "!=" ;

DParam. Parameter ::= SDouble ;
IParam. Parameter ::= SInt ;

And. BooleanOperator ::= "and";
Or. BooleanOperator ::= "or";
Not. BooleanOperator ::= "not";

Num. NumberConstant ::= Double;

TName. TensorName ::= Char;
TSub.  Subscript ::= Integer;
TSubs. Subscript ::= Subscript "-" Integer;
TElem. Element ::= TensorName "_" Subscript;
ElemT. ElementType ::= "Real";

Def1. ElementDeclaration ::= "declare-fun" Element "()" ElementType;
Def2. ElementDeclaration ::= "declare-const" Element ElementType;
Def.  Declaration ::= "(" ElementDeclaration ")";

-- connective formula placeholder as ComparitiveFormula is not implemented here
-- ConForm1. ConnectiveFormula ::= BooleanOperator "(" ComparitiveFormula ")";
ConForm2. ConnectiveFormula ::= BooleanOperator "(" ConnectiveFormula ")";

AForm. ArithmeticFormula ::= "(" ArithmeticOperator "(" Element | Parameter | ArithmeticFormula ")" ")";
CompForm. ComparativeFormula ::= "(" ComparitiveOperator "(" Element | Parameter | ArithmeticFormula ")" ")";
ConnForm. ConnectiveFormula ::= "(" Connective "(" (ComparativeFormula | ConnectiveFormula) ")" ")";

Form. Formula ::= (ArithmeticFormula | ComparativeFormula | ConnectiveFormula);

Def.  Definition ::= "(" "declare-fun" ElementDefinition ")";
EDef. ElementDefinition ::= Element "()" ElementType;

Con. Constraint ::= "(" "assert" Formula ")";

ComBase. Command ::= Definition | Constraint
Coms. Command ::= Command "\n" Command;

EType. ElementType ::= "Real" ;
CDef. Definition ::= "(" "declare-const" Element ElementType ")" ;
FDef. Definition ::= "(" "declare-fun" Element "()" ElementType ")" ;

Con. Constraint ::= "(" "assert" Formula ")" ;
CommDef. Command ::= Definition ;

CommCon. Command ::= Constraint ;
Coms. Command ::= Command "\n" Command ;


comment ";" ;
entrypoints Command;
